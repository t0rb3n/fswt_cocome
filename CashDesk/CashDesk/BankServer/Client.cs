//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using Tecan.Sila2;
using Tecan.Sila2.Client;
using Tecan.Sila2.Server;

namespace CashDesk.BankServer
{
    
    
    ///  <summary>
    /// Class that implements the IBankServer interface through SiLA2
    /// </summary>
    public partial class BankServerClient : IBankServer
    {
        
        private IClientExecutionManager _executionManager;
        
        private IClientChannel _channel;
        
        private const string _serviceName = "sila2.com.mybank.banking.bankserver.v1.BankServer";
        
        ///  <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="channel">The channel through which calls should be executed</param>
        /// <param name="executionManager">A component to determine metadata to attach to any requests</param>
        public BankServerClient(IClientChannel channel, IClientExecutionManager executionManager)
        {
            _executionManager = executionManager;
            _channel = channel;
        }
        
        ///  <summary>
        /// </summary>
        /// <param name="amount"></param>
        public virtual TransactionContext CreateContext(long amount)
        {
            CreateContextRequestDto request = new CreateContextRequestDto(amount, null);
            Tecan.Sila2.Client.IClientCallInfo callInfo = _executionManager.CreateCallOptions("com.mybank/banking/BankServer/v1/Command/CreateContext");
            try
            {
                TransactionContext response = _channel.ExecuteUnobservableCommand<CreateContextRequestDto, CreateContextResponseDto>(_serviceName, "CreateContext", request, callInfo).ReturnValue.Extract(_executionManager.DownloadBinaryStore);
                callInfo.FinishSuccessful();
                return response;
            } catch (System.Exception ex)
            {
                System.Exception exception = _channel.ConvertException(ex);
                callInfo.FinishWithErrors(exception);
                throw exception;
            }
        }
        
        ///  <summary>
        /// </summary>
        /// <param name="transactionContextId"></param>
        /// <param name="account"></param>
        /// <param name="authorizationToken"></param>
        public virtual void AuthorizePayment(string transactionContextId, string account, string authorizationToken)
        {
            AuthorizePaymentRequestDto request = new AuthorizePaymentRequestDto(transactionContextId, account, authorizationToken, null);
            Tecan.Sila2.Client.IClientCallInfo callInfo = _executionManager.CreateCallOptions("com.mybank/banking/BankServer/v1/Command/AuthorizePayment");
            try
            {
                _channel.ExecuteUnobservableCommand<AuthorizePaymentRequestDto>(_serviceName, "AuthorizePayment", request, callInfo);
                callInfo.FinishSuccessful();
                return;
            } catch (System.Exception ex)
            {
                System.Exception exception = _channel.ConvertException(ex);
                callInfo.FinishWithErrors(exception);
                throw exception;
            }
        }
        
        private T Extract<T>(Tecan.Sila2.ISilaTransferObject<T> dto)
        
        {
            return dto.Extract(_executionManager.DownloadBinaryStore);
        }
    }
    
    ///  <summary>
    /// Factory to instantiate clients for the Bank Server.
    /// </summary>
    [System.ComponentModel.Composition.ExportAttribute(typeof(IClientFactory))]
    [System.ComponentModel.Composition.PartCreationPolicyAttribute(System.ComponentModel.Composition.CreationPolicy.Shared)]
    public partial class BankServerClientFactory : IClientFactory
    {
        
        ///  <summary>
        /// Gets the fully-qualified identifier of the feature for which clients can be generated
        /// </summary>
        public string FeatureIdentifier
        {
            get
            {
                return "com.mybank/banking/BankServer/v1";
            }
        }
        
        ///  <summary>
        /// Gets the interface type for which clients can be generated
        /// </summary>
        public System.Type InterfaceType
        {
            get
            {
                return typeof(IBankServer);
            }
        }
        
        ///  <summary>
        /// Creates a strongly typed client for the given execution channel and execution manager
        /// </summary>
        /// <param name="channel">The channel that should be used for communication with the server</param>
        /// <param name="executionManager">The execution manager to manage metadata</param>
        /// <returns>A strongly typed client. This object will be an instance of the InterfaceType property</returns>
        public object CreateClient(IClientChannel channel, IClientExecutionManager executionManager)
        {
            return new BankServerClient(channel, executionManager);
        }
    }
}

