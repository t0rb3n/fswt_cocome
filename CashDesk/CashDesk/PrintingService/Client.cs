//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using Tecan.Sila2;
using Tecan.Sila2.Client;
using Tecan.Sila2.Server;

namespace CashDesk.PrintingService
{
    
    
    ///  <summary>
    /// Class that implements the IPrintingService interface through SiLA2
    /// </summary>
    public partial class PrintingServiceClient : IPrintingService
    {
        
        private IClientExecutionManager _executionManager;
        
        private IClientChannel _channel;
        
        private const string _serviceName = "sila2.terminal.contracts.printingservice.v1.PrintingService";
        
        ///  <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="channel">The channel through which calls should be executed</param>
        /// <param name="executionManager">A component to determine metadata to attach to any requests</param>
        public PrintingServiceClient(IClientChannel channel, IClientExecutionManager executionManager)
        {
            _executionManager = executionManager;
            _channel = channel;
        }
        
        ///  <summary>
        /// </summary>
        /// <param name="line"></param>
        public virtual void PrintLine(string line)
        {
            PrintLineRequestDto request = new PrintLineRequestDto(line, null);
            Tecan.Sila2.Client.IClientCallInfo callInfo = _executionManager.CreateCallOptions("terminal/contracts/PrintingService/v1/Command/PrintLine");
            try
            {
                _channel.ExecuteUnobservableCommand<PrintLineRequestDto>(_serviceName, "PrintLine", request, callInfo);
                callInfo.FinishSuccessful();
                return;
            } catch (System.Exception ex)
            {
                System.Exception exception = _channel.ConvertException(ex);
                callInfo.FinishWithErrors(exception);
                throw exception;
            }
        }
        
        ///  <summary>
        /// </summary>
        public virtual void StartNext()
        {
            StartNextRequestDto request = new StartNextRequestDto(null);
            Tecan.Sila2.Client.IClientCallInfo callInfo = _executionManager.CreateCallOptions("terminal/contracts/PrintingService/v1/Command/StartNext");
            try
            {
                _channel.ExecuteUnobservableCommand<StartNextRequestDto>(_serviceName, "StartNext", request, callInfo);
                callInfo.FinishSuccessful();
                return;
            } catch (System.Exception ex)
            {
                System.Exception exception = _channel.ConvertException(ex);
                callInfo.FinishWithErrors(exception);
                throw exception;
            }
        }
        
        private T Extract<T>(Tecan.Sila2.ISilaTransferObject<T> dto)
        
        {
            return dto.Extract(_executionManager.DownloadBinaryStore);
        }
    }
    
    ///  <summary>
    /// Factory to instantiate clients for the Printing Service.
    /// </summary>
    [System.ComponentModel.Composition.ExportAttribute(typeof(IClientFactory))]
    [System.ComponentModel.Composition.PartCreationPolicyAttribute(System.ComponentModel.Composition.CreationPolicy.Shared)]
    public partial class PrintingServiceClientFactory : IClientFactory
    {
        
        ///  <summary>
        /// Gets the fully-qualified identifier of the feature for which clients can be generated
        /// </summary>
        public string FeatureIdentifier
        {
            get
            {
                return "terminal/contracts/PrintingService/v1";
            }
        }
        
        ///  <summary>
        /// Gets the interface type for which clients can be generated
        /// </summary>
        public System.Type InterfaceType
        {
            get
            {
                return typeof(IPrintingService);
            }
        }
        
        ///  <summary>
        /// Creates a strongly typed client for the given execution channel and execution manager
        /// </summary>
        /// <param name="channel">The channel that should be used for communication with the server</param>
        /// <param name="executionManager">The execution manager to manage metadata</param>
        /// <returns>A strongly typed client. This object will be an instance of the InterfaceType property</returns>
        public object CreateClient(IClientChannel channel, IClientExecutionManager executionManager)
        {
            return new PrintingServiceClient(channel, executionManager);
        }
    }
}

