//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using Tecan.Sila2;
using Tecan.Sila2.Client;
using Tecan.Sila2.Server;

namespace CashDesk.BarcodeScannerService
{
    
    
    ///  <summary>
    /// Class that implements the IBarcodeScannerService interface through SiLA2
    /// </summary>
    public partial class BarcodeScannerServiceClient : IBarcodeScannerService
    {
        
        private IClientExecutionManager _executionManager;
        
        private IClientChannel _channel;
        
        private const string _serviceName = "sila2.cocome.terminal.contracts.barcodescannerservice.v1.BarcodeScannerService";
        
        ///  <summary>
        /// Creates a new instance
        /// </summary>
        /// <param name="channel">The channel through which calls should be executed</param>
        /// <param name="executionManager">A component to determine metadata to attach to any requests</param>
        public BarcodeScannerServiceClient(IClientChannel channel, IClientExecutionManager executionManager)
        {
            _executionManager = executionManager;
            _channel = channel;
        }
        
        ///  <summary>
        /// </summary>
        public virtual Tecan.Sila2.IIntermediateObservableCommand<string> ListenToBarcodes()
        {
            ListenToBarcodesRequestDto request = new ListenToBarcodesRequestDto(null);
            return _channel.ExecuteIntermediatesCommand<ListenToBarcodesRequestDto, string, ListenToBarcodesIntermediateDto>(_serviceName, "ListenToBarcodes", request, ConvertListenToBarcodesIntermediate, ConvertListenToBarcodesException, _executionManager.CreateCallOptions(request.CommandIdentifier));
        }
        
        ///  <summary>
        /// Converts the error ocurred during execution of ListenToBarcodes to a proper exception
        /// </summary>
        /// <param name="errorIdentifier">The identifier of the error that has happened</param>
        /// <param name="errorMessage">The original error message from the server</param>
        /// <returns>The converted exception or null, if the error is not understood</returns>
        private static System.Exception ConvertListenToBarcodesException(string errorIdentifier, string errorMessage)
        {
            return null;
        }
        
        ///  <summary>
        /// Unwraps the response of the ListenToBarcodesIntermediate command
        /// </summary>
        /// <param name="value">The response data transfer object</param>
        /// <returns>The actual response</returns>
        private string ConvertListenToBarcodesIntermediate(ListenToBarcodesIntermediateDto value)
        {
            return value.Intermediate.Extract(_executionManager.DownloadBinaryStore);
        }
        
        private T Extract<T>(Tecan.Sila2.ISilaTransferObject<T> dto)
        
        {
            return dto.Extract(_executionManager.DownloadBinaryStore);
        }
    }
    
    ///  <summary>
    /// Factory to instantiate clients for the Barcode Scanner Service.
    /// </summary>
    [System.ComponentModel.Composition.ExportAttribute(typeof(IClientFactory))]
    [System.ComponentModel.Composition.PartCreationPolicyAttribute(System.ComponentModel.Composition.CreationPolicy.Shared)]
    public partial class BarcodeScannerServiceClientFactory : IClientFactory
    {
        
        ///  <summary>
        /// Gets the fully-qualified identifier of the feature for which clients can be generated
        /// </summary>
        public string FeatureIdentifier
        {
            get
            {
                return "cocome.terminal/contracts/BarcodeScannerService/v1";
            }
        }
        
        ///  <summary>
        /// Gets the interface type for which clients can be generated
        /// </summary>
        public System.Type InterfaceType
        {
            get
            {
                return typeof(IBarcodeScannerService);
            }
        }
        
        ///  <summary>
        /// Creates a strongly typed client for the given execution channel and execution manager
        /// </summary>
        /// <param name="channel">The channel that should be used for communication with the server</param>
        /// <param name="executionManager">The execution manager to manage metadata</param>
        /// <returns>A strongly typed client. This object will be an instance of the InterfaceType property</returns>
        public object CreateClient(IClientChannel channel, IClientExecutionManager executionManager)
        {
            return new BarcodeScannerServiceClient(channel, executionManager);
        }
    }
}

