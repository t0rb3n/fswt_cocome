//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CashDesk.CardReaderService
{
    using Tecan.Sila2;
    
    
    ///  <summary>
    /// Data transfer object for the request of the Authorize command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class AuthorizeRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.IntegerDto _amount;
        
        private Tecan.Sila2.BinaryDto _challenge;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public AuthorizeRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="amount"></param>
        ///  <param name="challenge"></param>
        public AuthorizeRequestDto(long amount, System.IO.Stream challenge, Tecan.Sila2.IBinaryStore store)
        {
            Amount = new Tecan.Sila2.IntegerDto(amount, store);
            Challenge = new Tecan.Sila2.BinaryDto(challenge, store);
        }
        
        ///  <summary>
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.IntegerDto Amount
        {
            get
            {
                return _amount;
            }
            set
            {
                _amount = value;
            }
        }
        
        ///  <summary>
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(2)]
        public Tecan.Sila2.BinaryDto Challenge
        {
            get
            {
                return _challenge;
            }
            set
            {
                _challenge = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "cocome.terminal/contracts/CardReaderService/v1/Command/Authorize";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the response of the Authorize command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class AuthorizeResponseDto : Tecan.Sila2.ISilaTransferObject
    {
        
        private AuthorizationDataDto _returnValue;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public AuthorizeResponseDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="returnValue"></param>
        public AuthorizeResponseDto(AuthorizationData returnValue, Tecan.Sila2.IBinaryStore store)
        {
            ReturnValue = new AuthorizationDataDto(returnValue, store);
        }
        
        ///  <summary>
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public AuthorizationDataDto ReturnValue
        {
            get
            {
                return _returnValue;
            }
            set
            {
                _returnValue = value;
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Confirm command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class ConfirmRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public ConfirmRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public ConfirmRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "cocome.terminal/contracts/CardReaderService/v1/Command/Confirm";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// Data transfer object for the request of the Abort command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class AbortRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        private Tecan.Sila2.StringDto _errorMessage;
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        public AbortRequestDto()
        {
        }
        
        ///  <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        ///  <param name="errorMessage"></param>
        public AbortRequestDto(string errorMessage, Tecan.Sila2.IBinaryStore store)
        {
            ErrorMessage = new Tecan.Sila2.StringDto(errorMessage, store);
        }
        
        ///  <summary>
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto ErrorMessage
        {
            get
            {
                return _errorMessage;
            }
            set
            {
                _errorMessage = value;
            }
        }
        
        ///  <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "cocome.terminal/contracts/CardReaderService/v1/Command/Abort";
            }
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    ///  <summary>
    /// The data transfer object for Authorization Data
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class AuthorizationDataDto : Tecan.Sila2.ISilaTransferObject<AuthorizationData>
    {
        
        private InnerStruct _inner;
        
        ///  <summary>
        /// Initializes a new instance (to be used by the serializer)
        /// </summary>
        public AuthorizationDataDto()
        {
            _inner = new InnerStruct();
        }
        
        ///  <summary>
        /// Initializes a new data transfer object from the business object
        /// </summary>
        /// <param name="inner">The business object that should be transferred</param>
        /// <param name="store">A component to handle binary data</param>
        public AuthorizationDataDto(AuthorizationData inner, Tecan.Sila2.IBinaryStore store)
        {
            _inner = new InnerStruct(inner, store);
        }
        
        ///  <summary>
        /// </summary>
        public Tecan.Sila2.IntegerDto Amount
        {
            get
            {
                if ((_inner == null))
                {
                    _inner = new InnerStruct();
                }
                return Inner.Amount;
            }
            set
            {
                if ((_inner == null))
                {
                    _inner = new InnerStruct();
                }
                Inner.Amount = value;
            }
        }
        
        ///  <summary>
        /// </summary>
        public Tecan.Sila2.StringDto Account
        {
            get
            {
                if ((_inner == null))
                {
                    _inner = new InnerStruct();
                }
                return Inner.Account;
            }
            set
            {
                if ((_inner == null))
                {
                    _inner = new InnerStruct();
                }
                Inner.Account = value;
            }
        }
        
        ///  <summary>
        /// </summary>
        public Tecan.Sila2.StringDto AuthorizationToken
        {
            get
            {
                if ((_inner == null))
                {
                    _inner = new InnerStruct();
                }
                return Inner.AuthorizationToken;
            }
            set
            {
                if ((_inner == null))
                {
                    _inner = new InnerStruct();
                }
                Inner.AuthorizationToken = value;
            }
        }
        
        ///  <summary>
        /// The actual contents of the data transfer object.
        /// </summary>
        [ProtoBuf.ProtoMemberAttribute(1)]
        public InnerStruct Inner
        {
            get
            {
                return _inner;
            }
            set
            {
                _inner = value;
            }
        }
        
        ///  <summary>
        /// Extracts the transferred value
        /// </summary>
        /// <param name="store">The binary store in which to store binary data</param>
        /// <returns>the inner value</returns>
        public AuthorizationData Extract(Tecan.Sila2.IBinaryStore store)
        {
            return new AuthorizationData(Amount.Extract(store), Account.Extract(store), AuthorizationToken.Extract(store));
        }
        
        ///  <summary>
        /// Creates the data transfer object from the given object to transport
        /// </summary>
        /// <param name="inner">The object to transfer</param>
        /// <param name="store">An object to store binary data</param>
        public static AuthorizationDataDto Create(AuthorizationData inner, Tecan.Sila2.IBinaryStore store)
        {
            return new AuthorizationDataDto(inner, store);
        }
        
        ///  <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
        
        ///  <summary>
        /// Represents the inner structure for actual content
        /// </summary>
        [ProtoBuf.ProtoContractAttribute()]
        public class InnerStruct
        {
            
            private Tecan.Sila2.IntegerDto _amount;
            
            private Tecan.Sila2.StringDto _account;
            
            private Tecan.Sila2.StringDto _authorizationToken;
            
            ///  <summary>
            /// Initializes a new instance (to be used by the serializer)
            /// </summary>
            public InnerStruct()
            {
            }
            
            ///  <summary>
            /// Initializes a new data transfer object from the business object
            /// </summary>
            /// <param name="inner">The business object that should be transferred</param>
            /// <param name="store">A component to handle binary data</param>
            public InnerStruct(AuthorizationData inner, Tecan.Sila2.IBinaryStore store)
            {
                Amount = new Tecan.Sila2.IntegerDto(inner.Amount, store);
                Account = new Tecan.Sila2.StringDto(inner.Account, store);
                AuthorizationToken = new Tecan.Sila2.StringDto(inner.AuthorizationToken, store);
            }
            
            ///  <summary>
            /// </summary>
            [ProtoBuf.ProtoMemberAttribute(1)]
            public Tecan.Sila2.IntegerDto Amount
            {
                get
                {
                    return _amount;
                }
                set
                {
                    _amount = value;
                }
            }
            
            ///  <summary>
            /// </summary>
            [ProtoBuf.ProtoMemberAttribute(2)]
            public Tecan.Sila2.StringDto Account
            {
                get
                {
                    return _account;
                }
                set
                {
                    _account = value;
                }
            }
            
            ///  <summary>
            /// </summary>
            [ProtoBuf.ProtoMemberAttribute(3)]
            public Tecan.Sila2.StringDto AuthorizationToken
            {
                get
                {
                    return _authorizationToken;
                }
                set
                {
                    _authorizationToken = value;
                }
            }
        }
    }
}
